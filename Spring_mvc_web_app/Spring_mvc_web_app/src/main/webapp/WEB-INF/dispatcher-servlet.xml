<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
      
<!-- At the heard of spring mvc is dispatcher servlet, a servlet that functions as spring mvc
front controller. Like any servlet, dispatcher servlet must be configure in the web application
web.xml file. -->      
        
<!-- We will configure the dispatcher-servlet.xml. The dispatcher servlet needs to be configured
so that the web container can bootstrap and map the servlet. Configuring the dispatcher servlet
is a two way process. First you need a total container to load a servlet and map to one or more 
URL patterns. After bootstraping, the servlet uses the created web application context to configure
it self. The ... will try to detect the needed components from this application context and if 
it is not found it will use some kind of default. -->

	<!-- we enable auto scanning feature in spring. The base package indicates where are your
	components store. Spring will scan this folder and find out the bean annotated with
	a @Component annotation and register in spring container. Component scanning with context
	component scanning is telling spring that should search the classpath for all the classed
	under a specify package and look in each class if it has a controller, component, service
	or repository annotation. And if it does, the spring will registry the class with the bean
	factory as if you had typed a xml tag bean class in xml configuration class. -->
	
	<!-- option 1, used in the video tutorial. -->
	<context:component-scan base-package="com.demo.controller" />
	
	<!-- option 2, used in the slides tutorial. -->
	<!--
	<context:component-scan base-package="com.demo.controller">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<mvc:annotation-driven/>
	<mvc:default-servlet-handler/>
	-->
	
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/pages/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	
</beans>