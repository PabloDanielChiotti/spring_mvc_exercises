<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
 
 <!-- Enables the annotations -->
	<context:annotation-config/>
 
<!-- bean used in package bean.training -->  
	<bean id="helloWorldBean" class="bean.training.HelloWorld">
		<property name="name" value="VTC" />
	</bean>

<!-- beans used in package bean.training.constructor -->
	<bean id="computerBean" class="bean.training.constructor.ComputerBean">
		<constructor-arg ref="harddriveBean" />
	</bean>
	
	<bean id="computerBean2" class="bean.training.constructor.ComputerBean">
		<constructor-arg ref="harddriveBean" />
		<constructor-arg ref="graphicsCardBean" />
		<constructor-arg ref="cpuBean" />
	</bean>
	
	<bean id="harddriveBean" class="bean.training.constructor.HarddriveBean" scope="prototype" />
	<bean id="graphicsCardBean" class="bean.training.constructor.GraphicsCardBean" scope="singleton" />
	<bean id="cpuBean" class="bean.training.constructor.CPUBean" scope="singleton" />

<!-- beans used in package bean.training.setter -->
	<bean id="shoppingCartBean" class="bean.training.setter.ShoppingCartBean">
		<property name="product" ref="productBean" />
	</bean>
	
	<bean id="shoppingCartBean2" class="bean.training.setter.ShoppingCartBean"
		p:date="08-04-2016"
		p:product-ref="productBean">		
	</bean> 
	
	<bean id="productBean" class="bean.training.setter.ProductBean">
		<property name="name" value="Cologne Versace" />
		<property name="description" value="Fragrance" />
		<property name="price" value="7" />
	</bean>  	
	
<!-- beans and inner beans used in package bean.training.innerBeans -->
	<bean id="airplaneBean" class="bean.training.innerBeans.AirplaneBean">
		<property name="manufacturer" value="Boeing" />
		<property name="wingSpan" value="50" />
		<property name="fuelCapacity" value="50000" />
		<property name="engine">
			<bean id="engine" class="bean.training.innerBeans.EngineBean">
				<property name="manufacturer" value="Rolls-Royce" />
				<property name="horsepower" value="10000" />
			</bean>
		</property>
	</bean>
	
	<!-- inner beans:  in the spring framework, in the inner bean definition is not required to define id or name of bean. The reason
	behind this, is that the container ignores its values. Inner bean is used when a bean is used for one particular property. When
	the bean tag element is defined inside the property or constructor argument is known as an inner bean.-->
	
	<bean id="airplaneBean2" class="bean.training.innerBeans.AirplaneBean">
		<property name="manufacturer" value="NASA" />
		<property name="wingSpan" value="50" />
		<property name="fuelCapacity" value="50000" />
		<property name="engine">
			<bean class="bean.training.innerBeans.EngineBean">
				<property name="manufacturer" value="TrentXWB" />
				<property name="horsepower" value="10000" />
			</bean>
		</property>
	</bean>
	
<!-- beans used in package bean.training.injectingCollections -->
	<bean id="collectionExample" class="bean.training.injectingCollections.CollectionExample">
		<!-- can exist duplicate values in a list -->
		<property name="exampleList">
			<list>
				<value>Credit Card</value>
				<value>COD</value>
				<value>Check</value>
				<value>Cash</value>
			</list>
		</property>
		<!-- can not exist duplicated values in a set -->
		<property name="exampleSet">
			<set>
				<value>Acura</value>
				<value>BMW</value>
				<value>Cadillac</value>
				<value>Dodge</value>
			</set>
		</property>
		<property name="exampleMap">
			<map>
				<entry key="1" value="Gift card" />
				<entry key="2" value="Buy 1 Get 1 Free" />
				<entry key="3" value="Sale" />
				<entry key="4" value="Cash Back" />
			</map>
		</property>
		<property name="exampleProp">
			<props>
				<prop key="one">Server name</prop>
				<prop key="two">User name</prop>
				<prop key="three">Password</prop>
				<prop key="four">Secure Token</prop>
			</props>
		</property>
	</bean>	
	
<!-- beans used in package bean.training.injectingCollections -->
	<bean id="collectionExample2" class="bean.training.injectingCollections.CollectionExample2">
		<property name="usersList">
			<list value-type="bean.training.injectingCollections.UserBean">
				<ref local="userBean" />
				<ref local="userBean2" />
			</list>
		</property>		
	</bean>
	
	<bean id="userBean" class="bean.training.injectingCollections.UserBean">
		<property name="name" value="Pablo Chiotti" />
	</bean>

	<bean id="userBean2" class="bean.training.injectingCollections.UserBean">
		<property name="name" value="Polsky Isirimovich" />
	</bean>

<!-- beans used in package bean.training.autowiring -->
	<bean id="homeAddress" class="bean.training.autowiring.AddressBean">
		<property name="streetName" value="123 homestreet" />
		<property name="state" value="CA" />
		<property name="city" value="Los Angeles" />
		<property name="zip" value="55555" />
	</bean>

	<bean id="officeAddress" class="bean.training.autowiring.AddressBean" primary="true">
		<property name="streetName" value="123 officestreet" />
		<property name="state" value="CA" />
		<property name="city" value="Los Angeles" />
		<property name="zip" value="55555" />
	</bean>

	<!-- el autowiring byType, lo que hace es buscar la otra property de student dentro de este xml,
	intentado encontrar algún bean que sea del tipo bean.training.autowiring.AddressBean en este caso.
	Si llegara a haber más de uno habría problemas; pero este problema es posible solucionarlo si a unos de esos
	beans que tienen como "class" a bean.training.autowiring.AddressBean se le agrega el primery="true".
	Existen distintos tipos de autowire! -->
	<bean id="studentBean" class="bean.training.autowiring.StudentBean" autowire="byType" >
		<property name="name" value="Estudent" />
	</bean>

<!-- beans used in package bean.training.requiredAnnotation -->
	<!-- si no inicializamos la property name con un value, al tener la annotation como @Required, nos
	va a lanzar una exception del tipo BeanInitializationException -->
	<bean id="orderBean" class="bean.training.requiredAnnotation.OrderBean">
		<property name="name" value="first" />
	</bean>

<!-- beans used in package bean.training.autowiredAnnotation -->
	<bean id="bookBeanAutowiredAnnotationMethodSet" class="bean.training.autowiredAnnotation.BookBeanAutowiredAnnotationMethodSet">
		<property name="title" value="Harry Potter" />
		<property name="author" value="J. L. Rowling" />
		<property name="price" value="29.99" />
		<property name="isbn" value="1234" />
		<property name="edition" value="lst" />
	</bean>

	<bean id="bookBeanAutowiredAnnotationInReference" class="bean.training.autowiredAnnotation.BookBeanAutowiredAnnotationInReference">
		<property name="title" value="Harry Potter" />
		<property name="author" value="J. L. Rowling" />
		<property name="price" value="29.99" />
		<property name="isbn" value="1234" />
		<property name="edition" value="lst" />
	</bean>

	<bean id="bookBeanAutowiredAnnotationConstructor" class="bean.training.autowiredAnnotation.BookBeanAutowiredAnnotationConstructor">
		<property name="title" value="Harry Potter" />
		<property name="author" value="J. L. Rowling" />
		<property name="price" value="29.99" />
		<property name="isbn" value="1234" />
		<property name="edition" value="lst" />
	</bean>

	<bean id="publisherBean" class="bean.training.autowiredAnnotation.PublisherBean">
		<property name="name" value="Scholastic" />
		<property name="address" value="123 Street" />
		<property name="phoneNumber" value="987.789.3698" />
		<property name="genres">
			<list>
				<value>Sci-Fi</value>
				<value>Children's Books</value>
				<value>Non-Fiction</value>
				<value>Self Help</value>
			</list>
		</property>		
	</bean>

	<!-- NoSuchBeanDefinitionException, este es el error que va a lanzar si sacamos la property name o lastName
	pero no así, si sacamos la property phoneNumber ya que la misma a pesar de tener la annotation @Autowired,
	tambien tiene entre parentesis de que no es obligatoria dicha property -->
	<bean id="employeeBeanAutorwiredAndRequired" class="bean.training.autowiredAnnotation.EmployeeBeanAutowiredAndRequired">
		<property name="name" value="Pablo" />
		<property name="lastName" value="Chiotti" />
		<property name="phoneNumber" value="987" />
	</bean>
	
	<bean id="employeeBeanAutorwiredAndRequiredWithoutPhoneNumber" class="bean.training.autowiredAnnotation.EmployeeBeanAutowiredAndRequired">
		<property name="name" value="Pablo" />
		<property name="lastName" value="Chiotti" />
	</bean>
	
<!-- beans used in package bean.training.qualifierAnnotation -->
	<bean id="onlineCustomer" class="bean.training.qualifierAnnotation.OnlineCustomer">
		<property name="id" value="1" />
		<property name="userName" value="Bob" />
		<property name="password" value="bu" />
	</bean>
	
	<bean id="travelTicketSea" class="bean.training.qualifierAnnotation.TravelTicket">
		<property name="id" value="1" />
		<property name="description" value="By Sea" />
		<property name="type" value="sea" />
	</bean>

	<bean id="travelTicketAir" class="bean.training.qualifierAnnotation.TravelTicket">
		<property name="id" value="2" />
		<property name="description" value="By Air" />
		<property name="type" value="air" />
	</bean>
	
</beans>       